// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "walled_id", type: "string" },
      { name: "private_key", type: "string" },
    ],
  },
  {
    name: "payments",
    columns: [
      { name: "to_wallet_id", type: "string" },
      { name: "amount", type: "float" },
      { name: "date", type: "datetime" },
      { name: "is_saved", type: "bool", defaultValue: "false" },
      { name: "payment_name", type: "string" },
      { name: "user_id", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Payments = InferredTypes["payments"];
export type PaymentsRecord = Payments & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  payments: PaymentsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Hakan-zer-s-workspace-c6bocj.us-east-1.xata.sh/db/make-payment-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
